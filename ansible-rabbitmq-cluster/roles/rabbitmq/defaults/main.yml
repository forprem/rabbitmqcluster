---
#
rabbitmq_hosts: |
   10.245.213.125 vio-openstack3.njrar.tus.ams1907.com
   10.245.213.126 vio-openstack4.njrar.tus.ams1907.com


local_rabbit_rpm: /root/rabbitmq-server-3.6.15-1.el7.noarch.rpm
rabbitmq_daemon: rabbitmq-server
rabbitmq_state: started
rabbitmq_enabled: yes

rabbitmq_version: "3.6.11"

rabbitmq_rpm: "rabbitmq-server-{{ rabbitmq_version }}-1.el{{ ansible_distribution_major_version }}.noarch.rpm"
rabbitmq_rpm_url: "https://packagecloud.io/rabbitmq/rabbitmq-server/packages/el/{{ ansible_distribution_major_version }}/{{ rabbitmq_rpm }}/download"


update_hosts: true 

# cluster
rabbitmq_create_cluster: yes
rabbitmq_erlang_cookie: MYRABBITMQCOOKIE

rabbitmq_use_longname: 'true'

# log rotate
rabbitmq_logrotate_period: weekly
rabbitmq_logrotate_amount: 20

# https://www.rabbitmq.com/install-debian.html
# The main setting that needs adjustment is the max number of open files, also known as ulimit -n.
# The default value on many operating systems is too low for a messaging broker (eg. 1024 on several Linux distributions).
# We recommend allowing for at least 65536 file descriptors for user rabbitmq in production environments.
# 4096 should be sufficient for most development workloads
rabbitmq_ulimit_open_files: 4096

# default ports
rabbitmq_tls_port: 5671
rabbitmq_amqp_port: 5672
rabbitmq_epmd_port: 4369
rabbitmq_node_port: 25672

# plugins for HTTP API monitor
rabbitmq_plugins:
  - rabbitmq_management
  - rabbitmq_management_agent
  - rabbitmq_shovel
  - rabbitmq_shovel_management

# TLS/SSL support
enable_tls: false
# if true, only tls is supported which means amqp default port 5672 is not open anymore
tls_only: false

tls_verify: "verify_none"
tls_fail_if_no_peer_cert: false

cacertfile: ""
cacertfile_dest: "/etc/rabbitmq/cacert.pem"

certfile: ""
certfile_dest: "/etc/rabbitmq/cert.pem"

keyfile: ""
keyfile_dest: "/etc/rabbitmq/key.pem"

# By default, queues within a RabbitMQ cluster are located on a single node (the node on which they were first declared).
# Queues can optionally be made mirrored across all nodes, or exactly N number of nodes
# By enabling this variable to true, there will be 1 queue master and 1 queue mirror.
# If the node running the queue master becomes unavailable, the queue mirror will be automatically promoted to master.
backup_queues_in_two_nodes: false
